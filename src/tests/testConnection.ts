import { networkService } from '../services/networkService';

export async function testConnection() {
  try {
    console.log('üß™ Iniciando testes de conex√£o...\n');

    // Teste 1: Configura√ß√µes da rede
    const networkConfig = networkService.getNetworkConfig();
    console.log('Configura√ß√£o da rede:');
    console.log('- Nome:', networkConfig.name);
    console.log('- Token:', networkConfig.token);
    console.log('- WebSocket:', networkConfig.endpoints.ws);
    console.log('- RPC:', networkConfig.endpoints.rpc);
    console.log('‚úÖ Configura√ß√µes verificadas!\n');

    // Teste 2: Configura√ß√µes da carteira
    const walletConfig = networkService.getWalletConfig();
    console.log('Configura√ß√£o da carteira:');
    console.log('- Nome:', walletConfig.name);
    console.log('- App:', walletConfig.appName);
    console.log('‚úÖ Configura√ß√µes verificadas!\n');

    // Teste 3: Conex√£o com a rede
    console.log('Conectando √† rede...');
    await networkService.connectNetwork();
    console.log('‚úÖ Rede conectada!\n');

    // Teste 4: Conex√£o com a carteira
    console.log('Conectando √† carteira...');
    await networkService.connectWallet();
    const currentAccount = networkService.getCurrentAccount();
    
    if (currentAccount) {
      console.log('‚úÖ Carteira conectada:', currentAccount);
      // Teste 5: Verificar saldo
      const balance = await networkService.getBalance();
      console.log('‚úÖ Saldo verificado:', balance, networkConfig.token);
    } else {
      throw new Error('Falha ao conectar carteira');
    }

    console.log('\n‚ú® Todos os testes conclu√≠dos com sucesso!');
    return true;
  } catch (error) {
    console.error('\n‚ùå Erro nos testes:', error);
    return false;
  }
}

// Fun√ß√£o para executar o teste
async function runTests() {
  try {
    await testConnection();
  } catch (error) {
    console.error('Erro ao executar testes:', error);
  }
}

// Executa o teste
runTests(); 